(def! eval-ast (fn* [ast env]
  ;; (do (prn "eval-ast" ast "/" (keys env)) )
                    (cond
                      (symbol? ast) (let* [res (get env (str ast))]
                                          (if res res (throw (str ast " not found"))))

                      (list? ast)   (map (fn* [exp] (EVAL exp env)) ast)

                      (vector? ast) (vec (map (fn* [exp] (EVAL exp env)) ast))

                      (map? ast)    (apply hash-map
                                           (apply concat
                                                  (map (fn* [k] [k (EVAL (get ast k) env)])
                                                       (keys ast))))

                      "else"        ast)))